// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module example_getinstream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inStreamTop_TVALID,
        buf_r_din,
        buf_r_full_n,
        buf_r_write,
        count7_din,
        count7_full_n,
        count7_write,
        inStreamTop_TDATA,
        inStreamTop_TREADY,
        inStreamTop_TKEEP,
        inStreamTop_TSTRB,
        inStreamTop_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   inStreamTop_TVALID;
output  [127:0] buf_r_din;
input   buf_r_full_n;
output   buf_r_write;
output  [31:0] count7_din;
input   count7_full_n;
output   count7_write;
input  [63:0] inStreamTop_TDATA;
output   inStreamTop_TREADY;
input  [7:0] inStreamTop_TKEEP;
input  [7:0] inStreamTop_TSTRB;
input  [0:0] inStreamTop_TLAST;

reg ap_idle;
reg buf_r_write;
reg count7_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln44_reg_164;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_4_fu_92_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    inStreamTop_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    buf_r_blk_n;
reg    count7_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] count_2_fu_109_p2;
reg   [31:0] count_2_reg_159;
wire   [0:0] or_ln44_fu_131_p2;
reg   [31:0] count_fu_50;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_count_1;
reg    ap_block_pp0_stage0_01001;
wire   [64:0] tmp_5_fu_96_p3;
wire   [25:0] tmp_3_fu_115_p4;
wire   [0:0] icmp_ln44_fu_125_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_inStreamTop_V_data_V_U_apdone_blk;
wire   [63:0] inStreamTop_TDATA_int_regslice;
wire    inStreamTop_TVALID_int_regslice;
reg    inStreamTop_TREADY_int_regslice;
wire    regslice_both_inStreamTop_V_data_V_U_ack_in;
wire    regslice_both_inStreamTop_V_keep_V_U_apdone_blk;
wire   [7:0] inStreamTop_TKEEP_int_regslice;
wire    regslice_both_inStreamTop_V_keep_V_U_vld_out;
wire    regslice_both_inStreamTop_V_keep_V_U_ack_in;
wire    regslice_both_inStreamTop_V_strb_V_U_apdone_blk;
wire   [7:0] inStreamTop_TSTRB_int_regslice;
wire    regslice_both_inStreamTop_V_strb_V_U_vld_out;
wire    regslice_both_inStreamTop_V_strb_V_U_ack_in;
wire    regslice_both_inStreamTop_V_last_V_U_apdone_blk;
wire   [0:0] inStreamTop_TLAST_int_regslice;
wire    regslice_both_inStreamTop_V_last_V_U_vld_out;
wire    regslice_both_inStreamTop_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

example_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

example_regslice_both #(
    .DataWidth( 64 ))
regslice_both_inStreamTop_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStreamTop_TDATA),
    .vld_in(inStreamTop_TVALID),
    .ack_in(regslice_both_inStreamTop_V_data_V_U_ack_in),
    .data_out(inStreamTop_TDATA_int_regslice),
    .vld_out(inStreamTop_TVALID_int_regslice),
    .ack_out(inStreamTop_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStreamTop_V_data_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 8 ))
regslice_both_inStreamTop_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStreamTop_TKEEP),
    .vld_in(inStreamTop_TVALID),
    .ack_in(regslice_both_inStreamTop_V_keep_V_U_ack_in),
    .data_out(inStreamTop_TKEEP_int_regslice),
    .vld_out(regslice_both_inStreamTop_V_keep_V_U_vld_out),
    .ack_out(inStreamTop_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStreamTop_V_keep_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 8 ))
regslice_both_inStreamTop_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStreamTop_TSTRB),
    .vld_in(inStreamTop_TVALID),
    .ack_in(regslice_both_inStreamTop_V_strb_V_U_ack_in),
    .data_out(inStreamTop_TSTRB_int_regslice),
    .vld_out(regslice_both_inStreamTop_V_strb_V_U_vld_out),
    .ack_out(inStreamTop_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStreamTop_V_strb_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inStreamTop_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStreamTop_TLAST),
    .vld_in(inStreamTop_TVALID),
    .ack_in(regslice_both_inStreamTop_V_last_V_U_ack_in),
    .data_out(inStreamTop_TLAST_int_regslice),
    .vld_out(regslice_both_inStreamTop_V_last_V_U_vld_out),
    .ack_out(inStreamTop_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStreamTop_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln44_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_fu_50 <= count_2_fu_109_p2;
    end else if ((((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln44_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        count_fu_50 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_2_reg_159 <= count_2_fu_109_p2;
        or_ln44_reg_164 <= or_ln44_fu_131_p2;
    end
end

always @ (*) begin
    if (((tmp_4_fu_92_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_count_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_count_1 = count_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_blk_n = buf_r_full_n;
    end else begin
        buf_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_r_write = 1'b1;
    end else begin
        buf_r_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln44_reg_164 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count7_blk_n = count7_full_n;
    end else begin
        count7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln44_reg_164 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count7_write = 1'b1;
    end else begin
        count7_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStreamTop_TDATA_blk_n = inStreamTop_TVALID_int_regslice;
    end else begin
        inStreamTop_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStreamTop_TREADY_int_regslice = 1'b1;
    end else begin
        inStreamTop_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((or_ln44_reg_164 == 1'd1) & (count7_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | (buf_r_full_n == 1'b0) | (inStreamTop_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((or_ln44_reg_164 == 1'd1) & (count7_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | (buf_r_full_n == 1'b0) | (inStreamTop_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((or_ln44_reg_164 == 1'd1) & (count7_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | (buf_r_full_n == 1'b0) | (inStreamTop_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (buf_r_full_n == 1'b0) | (inStreamTop_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((or_ln44_reg_164 == 1'd1) & (count7_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buf_r_din = tmp_5_fu_96_p3;

assign count7_din = count_2_reg_159;

assign count_2_fu_109_p2 = (ap_sig_allocacmp_count_1 + 32'd1);

assign icmp_ln44_fu_125_p2 = (($signed(tmp_3_fu_115_p4) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign inStreamTop_TREADY = regslice_both_inStreamTop_V_data_V_U_ack_in;

assign or_ln44_fu_131_p2 = (inStreamTop_TLAST_int_regslice | icmp_ln44_fu_125_p2);

assign tmp_3_fu_115_p4 = {{count_2_fu_109_p2[31:6]}};

assign tmp_4_fu_92_p1 = inStreamTop_TLAST_int_regslice;

assign tmp_5_fu_96_p3 = {{inStreamTop_TLAST_int_regslice}, {inStreamTop_TDATA_int_regslice}};

endmodule //example_getinstream
