-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_getinstream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStreamTop_TVALID : IN STD_LOGIC;
    buf_r_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    buf_r_full_n : IN STD_LOGIC;
    buf_r_write : OUT STD_LOGIC;
    count7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    count7_full_n : IN STD_LOGIC;
    count7_write : OUT STD_LOGIC;
    inStreamTop_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStreamTop_TREADY : OUT STD_LOGIC;
    inStreamTop_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStreamTop_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStreamTop_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of example_getinstream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal or_ln44_reg_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_4_fu_92_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal inStreamTop_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal buf_r_blk_n : STD_LOGIC;
    signal count7_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal count_2_fu_109_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_2_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln44_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_fu_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_count_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_5_fu_96_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_3_fu_115_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln44_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal regslice_both_inStreamTop_V_data_V_U_apdone_blk : STD_LOGIC;
    signal inStreamTop_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal inStreamTop_TVALID_int_regslice : STD_LOGIC;
    signal inStreamTop_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_inStreamTop_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStreamTop_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal inStreamTop_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_inStreamTop_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStreamTop_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStreamTop_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal inStreamTop_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_inStreamTop_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStreamTop_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStreamTop_V_last_V_U_apdone_blk : STD_LOGIC;
    signal inStreamTop_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inStreamTop_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStreamTop_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component example_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component example_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component example_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);

    regslice_both_inStreamTop_V_data_V_U : component example_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inStreamTop_TDATA,
        vld_in => inStreamTop_TVALID,
        ack_in => regslice_both_inStreamTop_V_data_V_U_ack_in,
        data_out => inStreamTop_TDATA_int_regslice,
        vld_out => inStreamTop_TVALID_int_regslice,
        ack_out => inStreamTop_TREADY_int_regslice,
        apdone_blk => regslice_both_inStreamTop_V_data_V_U_apdone_blk);

    regslice_both_inStreamTop_V_keep_V_U : component example_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inStreamTop_TKEEP,
        vld_in => inStreamTop_TVALID,
        ack_in => regslice_both_inStreamTop_V_keep_V_U_ack_in,
        data_out => inStreamTop_TKEEP_int_regslice,
        vld_out => regslice_both_inStreamTop_V_keep_V_U_vld_out,
        ack_out => inStreamTop_TREADY_int_regslice,
        apdone_blk => regslice_both_inStreamTop_V_keep_V_U_apdone_blk);

    regslice_both_inStreamTop_V_strb_V_U : component example_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inStreamTop_TSTRB,
        vld_in => inStreamTop_TVALID,
        ack_in => regslice_both_inStreamTop_V_strb_V_U_ack_in,
        data_out => inStreamTop_TSTRB_int_regslice,
        vld_out => regslice_both_inStreamTop_V_strb_V_U_vld_out,
        ack_out => inStreamTop_TREADY_int_regslice,
        apdone_blk => regslice_both_inStreamTop_V_strb_V_U_apdone_blk);

    regslice_both_inStreamTop_V_last_V_U : component example_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inStreamTop_TLAST,
        vld_in => inStreamTop_TVALID,
        ack_in => regslice_both_inStreamTop_V_last_V_U_ack_in,
        data_out => inStreamTop_TLAST_int_regslice,
        vld_out => regslice_both_inStreamTop_V_last_V_U_vld_out,
        ack_out => inStreamTop_TREADY_int_regslice,
        apdone_blk => regslice_both_inStreamTop_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    count_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln44_fu_131_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                count_fu_50 <= count_2_fu_109_p2;
            elsif ((((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((or_ln44_fu_131_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                count_fu_50 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                count_2_reg_159 <= count_2_fu_109_p2;
                or_ln44_reg_164 <= or_ln44_fu_131_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, buf_r_full_n, ap_done_reg, count7_full_n, or_ln44_reg_164, ap_start_int, inStreamTop_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((or_ln44_reg_164 = ap_const_lv1_1) and (count7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (buf_r_full_n = ap_const_logic_0) or (inStreamTop_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, buf_r_full_n, ap_done_reg, count7_full_n, or_ln44_reg_164, ap_start_int, inStreamTop_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((or_ln44_reg_164 = ap_const_lv1_1) and (count7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (buf_r_full_n = ap_const_logic_0) or (inStreamTop_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, buf_r_full_n, ap_done_reg, count7_full_n, or_ln44_reg_164, ap_start_int, inStreamTop_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((or_ln44_reg_164 = ap_const_lv1_1) and (count7_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (buf_r_full_n = ap_const_logic_0) or (inStreamTop_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(buf_r_full_n, ap_done_reg, inStreamTop_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (buf_r_full_n = ap_const_logic_0) or (inStreamTop_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(count7_full_n, or_ln44_reg_164)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((or_ln44_reg_164 = ap_const_lv1_1) and (count7_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, tmp_4_fu_92_p1, ap_start_int)
    begin
        if (((tmp_4_fu_92_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_count_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, count_fu_50, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_count_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_count_1 <= count_fu_50;
        end if; 
    end process;


    buf_r_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, buf_r_full_n, ap_done_reg, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_blk_n <= buf_r_full_n;
        else 
            buf_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    buf_r_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_96_p3),128));

    buf_r_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_r_write <= ap_const_logic_1;
        else 
            buf_r_write <= ap_const_logic_0;
        end if; 
    end process;


    count7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, count7_full_n, or_ln44_reg_164, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln44_reg_164 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count7_blk_n <= count7_full_n;
        else 
            count7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    count7_din <= count_2_reg_159;

    count7_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln44_reg_164, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln44_reg_164 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count7_write <= ap_const_logic_1;
        else 
            count7_write <= ap_const_logic_0;
        end if; 
    end process;

    count_2_fu_109_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_count_1) + unsigned(ap_const_lv32_1));
    icmp_ln44_fu_125_p2 <= "1" when (signed(tmp_3_fu_115_p4) > signed(ap_const_lv26_0)) else "0";

    inStreamTop_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0, ap_start_int, inStreamTop_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStreamTop_TDATA_blk_n <= inStreamTop_TVALID_int_regslice;
        else 
            inStreamTop_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStreamTop_TREADY <= regslice_both_inStreamTop_V_data_V_U_ack_in;

    inStreamTop_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStreamTop_TREADY_int_regslice <= ap_const_logic_1;
        else 
            inStreamTop_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    or_ln44_fu_131_p2 <= (inStreamTop_TLAST_int_regslice or icmp_ln44_fu_125_p2);
    tmp_3_fu_115_p4 <= count_2_fu_109_p2(31 downto 6);
    tmp_4_fu_92_p1 <= inStreamTop_TLAST_int_regslice;
    tmp_5_fu_96_p3 <= (inStreamTop_TLAST_int_regslice & inStreamTop_TDATA_int_regslice);
end behav;
